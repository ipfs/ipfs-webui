name: ci
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - main

env:
  XDG_CACHE_HOME: ${{ github.workspace }}/.cache

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16.14.x

      - name: Cache bigger downloads
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ github.workspace }}/.cache
          key: ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false --cache ${{ github.workspace }}/.cache/npm

      # Separate cache for build dir, we reuse it in release publish workflow
      - name: Cache build output
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/cache@v2
        id: build-cache
        with:
          path: build
          key: ${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ github.sha }}

      - name: Confirm build works
        if: steps.build-cache.outputs.cache-hit != 'true'
        run: npm run build

      # Persist produced build dir:
      # - this is not for releases, but for quick testing during the dev
      # - action artifacts can be downloaded for 90 days, then are removed by github
      - name: Attach produced build to Github Action
        uses: actions/upload-artifact@v2
        with:
          name: ipfs-webui_${{ github.sha }}
          path: build
          if-no-files-found: error

  test-unit:
    name: 'test:unit'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16.14.x

      - name: Cache bigger downloads
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ github.workspace }}/.cache
          key: ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false --cache ${{ github.workspace }}/.cache/npm

      - name: Run unit tests
        run: npm run test:unit

  publish-preview:
    name: publish preview
    needs: build
    environment: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 16.14.x

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: ipfs-webui_${{ github.sha }}
          path: build

      # pin the built site to ipfs-websites cluster, output the cid as `steps.ipfs.outputs.cid`
      # see: https://github.com/ipfs-shipyard/ipfs-github-action
      - uses: ipfs/download-ipfs-distribution-action@v1
        with:
          name: go-ipfs
      - uses: ipfs/download-ipfs-distribution-action@v1
        with:
          name: ipfs-cluster-ctl
      - name: Fix DNS resolver
        run: |
          # fix resolv - DNS provided by Github is unreliable for DNSLik/dnsaddr
          sudo sed -i -e 's/nameserver 127.0.0.*/nameserver 1.1.1.1/g' /etc/resolv.conf

      - uses: ipfs/start-ipfs-daemon-action@v1
      - name: Import build/ to IPFS
        id: ipfs
        run: |
          root_cid=$(ipfs add --cid-version 1 -Q -r ./build)
          echo "::set-output name=cid::$root_cid"

      - run: echo ${{ steps.ipfs.outputs.cid }}
      - run: echo ${{ github.ref }}

      - name: Pin to ipfs-websites.collab.ipfscluster.io
        run: |
          ipfs-cluster-ctl --enc=json \
            --host "${CLUSTER_HOST}" \
            --basic-auth "$CLUSTER_USER:$CLUSTER_PASSWORD" \
            peers ls > cluster-peers-ls
          for maddr in $(jq -r '.[].ipfs.addresses[]?' cluster-peers-ls); do
            ipfs swarm peering add "$maddr" &
            ipfs swarm connect "$maddr" &
          done
          ipfs-cluster-ctl --enc=json \
              --host "${CLUSTER_HOST}" \
              --basic-auth "${CLUSTER_USER}:${CLUSTER_PASSWORD}" \
              pin add \
              --name "${PIN_NAME}" \
              --replication-min 1 \
              --replication-max 3 \
              --wait \
              $PIN_CID
        env:
          CLUSTER_HOST: "/dnsaddr/ipfs-websites.collab.ipfscluster.io"
          CLUSTER_USER: ${{ secrets.CLUSTER_USER }}
          CLUSTER_PASSWORD: ${{ secrets.CLUSTER_PASSWORD }}
          PIN_CID: ${{ steps.ipfs.outputs.cid }}
          PIN_NAME: "ipfs-webui@${{ github.sha }}"

      # dev dnslink is updated on each main branch update
      - run: npx dnslink-dnsimple --domain dev.webui.ipfs.io --link /ipfs/${{ steps.ipfs.outputs.cid }}
        if: github.ref == 'refs/heads/main'
        env:
          DNSIMPLE_TOKEN: ${{ secrets.DNSIMPLE_TOKEN }}

      # production dnslink is updated on release (during tag build)
      - run: npx dnslink-dnsimple --domain webui.ipfs.io --link /ipfs/${{ steps.ipfs.outputs.cid }}
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          DNSIMPLE_TOKEN: ${{ secrets.DNSIMPLE_TOKEN }}

  test-e2e:
    name: 'test:e2e'
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        backend: [go] # TODO: add 'js' â€“ see https://github.com/ipfs/ipfs-webui/issues/1737
    steps:
      - uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16.14.x

      - name: Cache bigger downloads
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ github.workspace }}/.cache
          key: ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false --cache ${{ github.workspace }}/.cache/npm

      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: ipfs-webui_${{ github.sha }}
          path: build

      - name: Run E2E against ${{ matrix.backend }}-ipfs
        run: E2E_IPFSD_TYPE=${{ matrix.backend }} npm run test:e2e

  # separate check for TS
  typecheck:
    name: typecheck
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16.14.x

      - name: Cache bigger downloads
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ github.workspace }}/.cache
          key: ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false --cache ${{ github.workspace }}/.cache/npm

      - name: Fancy Typecheck with GH annotations
        uses: gozala/typescript-error-reporter-action@v1.0.8
        with:
          project: tsconfig.json

      # make sure local check is also ok
      - name: Userland check
        run: npm run typecheck

  # separate check for eslint
  eslint:
    name: eslint
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16.14.x

      - name: Cache bigger downloads
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ github.workspace }}/.cache
          key: ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json') }}
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false --cache ${{ github.workspace }}/.cache/npm

      - name: ESLint
        run: npm run eslint

