on:
  workflow_call:

jobs:
  test-build:
    name: 'test:build'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.6.0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18.14.0
          cache: 'npm'

      - name: Cache test-build output
        uses: actions/cache@v3.3.1
        id: test-build-cache
        with:
          path: build
          key: test-build-${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json', 'public', 'src/**', '*.js', '*.ts') }}
          restore-keys: |
            test-build-${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json', 'public', 'src/**', '*.js', '*.ts') }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false

      # This is required to ensure that our code is instrumented with coverage details
      - name: Run test build
        if: steps.test-build-cache.outputs.cache-hit != 'true'
        run: npm run test:build

  test-e2e:
    name: 'test:e2e'
    runs-on: ubuntu-latest
    needs: [test-build]
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        shardTotal: [10]
    steps:
      - uses: actions/checkout@v3.6.0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18.14.0
          cache: 'npm'

      - name: Cache test-build output
        uses: actions/cache@v3.3.1
        id: test-build-cache
        with:
          path: build
          key: test-build-${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json', 'public', 'src/**', '*.js', '*.ts') }}
          restore-keys: |
            test-build-${{ runner.os }}-${{ hashFiles('package.json', 'package-lock.json', 'public', 'src/**', '*.js', '*.ts') }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false

      # This is required to ensure that our code is instrumented with coverage details
      - name: Run test build
        if: steps.test-build-cache.outputs.cache-hit != 'true'
        run: npm run test:build

      # Cache playwright binaries, but always install dependencies.
      - uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
      - run: npm ci
      - run: npx playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Cache nyc_output dir
        uses: actions/cache@v3.3.1
        id: nyc_output-cache
        with:
          path: ./.nyc_output
          key: nyc_output-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nyc_output-${{ runner.os }}-${{ github.sha }}

      - name: Run repeated-E2E against Kubo
        if: github.ref != 'refs/heads/main' # only run duplicated e2e tests on PRs
        run: npm run test:e2e -- --repeat-each 10 --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} # run each test 10 times to ensure no flakiness

      - name: Run non-repeated-E2E against Kubo
        if: github.ref == 'refs/heads/main' # run non-duplicated tests on non-PRs
        run: npm run test:e2e -- --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }}

      - name: Store Artifacts from Failed Tests
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  e2e-coverage: # since we run coverage in shards and some files may not contain coverage, we cache the .nyc_output directory
    name: 'e2e-coverage'
    runs-on: ubuntu-latest
    needs: [test-e2e]
    steps:
      - uses: actions/checkout@v3.6.0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18.14.0
          cache: 'npm'

      - name: Cache nyc_output dir
        uses: actions/cache@v3.3.1
        id: nyc_output-cache
        with:
          path: ./.nyc_output
          key: nyc_output-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nyc_output-${{ runner.os }}-${{ github.sha }}

      - name: Generate nyc coverage report
        id: coverage
        run: npx nyc report --reporter=lcov

      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: e2e_tests # optional
          name: e2e-coverage # optional
          fail_ci_if_error: false # optional (default = false)
          verbose: true # optional (default = false)
