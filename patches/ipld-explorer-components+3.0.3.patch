diff --git a/node_modules/ipld-explorer-components/dist/bundles/explore.js b/node_modules/ipld-explorer-components/dist/bundles/explore.js
index 123bc7f..29534b6 100644
--- a/node_modules/ipld-explorer-components/dist/bundles/explore.js
+++ b/node_modules/ipld-explorer-components/dist/bundles/explore.js
@@ -388,7 +388,9 @@ function getIpld() {
 
 function _getIpld() {
   _getIpld = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
-    var ipldDeps, _ipldDeps$map, _ipldDeps$map2, ipld, formats, ipldEthereum, ipldJson;
+    var _ipldEthereum$default;
+
+    var ipldDeps, _ipldDeps$map, _ipldDeps$map2, ipld, formatImports, formats, ipldEthereum, ipldJson;
 
     return regeneratorRuntime.wrap(function _callee3$(_context4) {
       while (1) {
@@ -405,26 +407,42 @@ function _getIpld() {
             /* webpackChunkName: "ipld" */
             'ipld-git'), import(
             /* webpackChunkName: "ipld" */
-            'ipld-raw'), import(
-            /* webpackChunkName: "ipld" */
-            'ipld-ethereum')]);
+            'ipld-raw')]);
 
           case 2:
             ipldDeps = _context4.sent;
-            // CommonJs exports object is .default when imported ESM style
             _ipldDeps$map = ipldDeps.map(function (mod) {
-              return mod["default"];
-            }), _ipldDeps$map2 = _toArray(_ipldDeps$map), ipld = _ipldDeps$map2[0], formats = _ipldDeps$map2.slice(1); // ipldEthereum is an Object, each key points to a ipld format impl
+              var _mod$default;
+
+              // CommonJs exports object is .default when imported ESM style
+              var actualModule = (_mod$default = mod["default"]) !== null && _mod$default !== void 0 ? _mod$default : mod;
+              return actualModule;
+            }), _ipldDeps$map2 = _toArray(_ipldDeps$map), ipld = _ipldDeps$map2[0], formatImports = _ipldDeps$map2.slice(1);
+            formats = formatImports.map(function (actualModule) {
+              if (actualModule.util == null) {
+                // actualModule has no util. using blockcodec-to-ipld-format
+                var convertedModule = convert(actualModule);
+                return convertedModule;
+              }
 
-            ipldEthereum = formats.pop();
-            formats.push.apply(formats, _toConsumableArray(Object.values(ipldEthereum))); // ipldJson uses the new format, use the conversion tool
+              return actualModule;
+            }); // ipldEthereum is an Object, each key points to a ipld format impl
 
-            _context4.next = 8;
+            _context4.next = 7;
+            return import(
+            /* webpackChunkName: "ipld" */
+            'ipld-ethereum');
+
+          case 7:
+            ipldEthereum = _context4.sent;
+            formats.push.apply(formats, _toConsumableArray(Object.values((_ipldEthereum$default = ipldEthereum["default"]) !== null && _ipldEthereum$default !== void 0 ? _ipldEthereum$default : ipldEthereum))); // ipldJson uses the new format, use the conversion tool
+
+            _context4.next = 11;
             return import(
             /* webpackChunkName: "ipld" */
             '@ipld/dag-json');
 
-          case 8:
+          case 11:
             ipldJson = _context4.sent;
             formats.push(convert(ipldJson));
             return _context4.abrupt("return", {
@@ -432,7 +450,7 @@ function _getIpld() {
               formats: formats
             });
 
-          case 11:
+          case 14:
           case "end":
             return _context4.stop();
         }
diff --git a/node_modules/ipld-explorer-components/dist/components/object-info/ObjectInfo.js b/node_modules/ipld-explorer-components/dist/components/object-info/ObjectInfo.js
index c4bcf4e..c130703 100644
--- a/node_modules/ipld-explorer-components/dist/components/object-info/ObjectInfo.js
+++ b/node_modules/ipld-explorer-components/dist/components/object-info/ObjectInfo.js
@@ -15,6 +15,7 @@ import { withTranslation } from 'react-i18next';
 import { ObjectInspector, chromeLight } from '@tableflip/react-inspector';
 import filesize from 'filesize';
 import LinksTable from './LinksTable';
+import { decodeCid } from '../cid-info/decode-cid';
 var humansize = filesize.partial({
   round: 0
 });
@@ -122,6 +123,8 @@ var DagNodeIcon = function DagNodeIcon(_ref) {
 };
 
 var ObjectInfo = function ObjectInfo(_ref2) {
+  var _cidInfo$cid$codec;
+
   var t = _ref2.t,
       tReady = _ref2.tReady,
       className = _ref2.className,
@@ -137,6 +140,8 @@ var ObjectInfo = function ObjectInfo(_ref2) {
       publicGatewayUrl = _ref2.publicGatewayUrl,
       props = _objectWithoutProperties(_ref2, ["t", "tReady", "className", "type", "cid", "localPath", "size", "data", "links", "format", "onLinkClick", "gatewayUrl", "publicGatewayUrl"]);
 
+  var cidInfo = decodeCid(cid);
+  type = (_cidInfo$cid$codec = cidInfo.cid.codec) !== null && _cidInfo$cid$codec !== void 0 ? _cidInfo$cid$codec : type;
   return /*#__PURE__*/React.createElement("section", _extends({
     className: "pa4 sans-serif ".concat(className)
   }, props), /*#__PURE__*/React.createElement("h2", {
