diff --git a/node_modules/ipld/src/index.js b/node_modules/ipld/src/index.js
index 12b046f..1ae185b 100644
--- a/node_modules/ipld/src/index.js
+++ b/node_modules/ipld/src/index.js
@@ -2,6 +2,7 @@
 
 const Block = require('ipld-block')
 const CID = require('cids')
+const {CID: newCID} = require('multiformats/cid')
 const mergeOptions = require('merge-options')
 const ipldDagCbor = require('ipld-dag-cbor')
 const ipldDagPb = require('ipld-dag-pb')
@@ -96,7 +97,7 @@ class IPLDResolver {
    * @param {ResolveOptions} [options]
    */
   resolve (cid, path, options) {
-    if (!CID.isCID(cid)) {
+    if (!CID.isCID(cid) && newCID.asCID(cid) == null) {
       throw new Error('`cid` argument must be a CID')
     }
     if (typeof path !== 'string') {
@@ -108,7 +109,7 @@ class IPLDResolver {
     const generator = async function * () {
       // End iteration if there isn't a CID to follow any more
       while (true) {
-        const format = await ipld.getFormat(multicodec.getCodeFromName(cid.codec))
+        const format = await ipld.getFormat(cid.code ?? multicodec.getCodeFromName(cid.codec))
 
         // get block
         // use local resolver
@@ -153,7 +154,7 @@ class IPLDResolver {
    */
   async get (cid, options) {
     const block = await this.bs.get(cid, options)
-    const format = await this.getFormat(block.cid.codec)
+    const format = await this.getFormat(block.cid.code ?? block.cid.codec)
     const node = format.util.deserialize(block.data)
 
     return node
@@ -332,7 +333,7 @@ class IPLDResolver {
      */
     const maybeRecurse = async (block, treePath) => {
       // A treepath we might want to follow recursively
-      const format = await this.getFormat(multicodec.getCodeFromName(block.cid.codec))
+      const format = await this.getFormat(multicodec.getCodeFromName(block.cid.code ?? block.cid.codec))
       const result = format.resolver.resolve(block.data, treePath)
       // Something to follow recursively, hence push it into the queue
       if (CID.isCID(result.value)) {
